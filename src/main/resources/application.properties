# Server port is arbitrary
spring.application.name=p3-lesson4
server.port=8311

## ==============================================

### LOG ###
## https://sematext.com/blog/slf4j-tutorial/

### import org.slf4j.Logger and org.slf4j.LoggerFactory
### private static Logger logger = LoggerFactory.getLogger(ClassName.class);
### The SLF4J or the Simple Logging Facade for Java is an abstraction layer for various Java logging frameworks, like Log4j 2 or Logback.
### This allows for plugging different logging frameworks at deployment time without the need for code changes.

## TRACE, DEBUG, INFO, WARN, ERROR

#logging.file = /complete-path-to-file-here/log-file-name.log

#debug=true
logging.level.web=INFO
logging.level.org.springframework.web=INFO

logging.level.my.solution.project3.lesson4=INFO
logging.level.my.solution.project3.lesson4.controller=INFO
logging.level.my.solution.project3.lesson4.service=INFO
logging.level.my.solution.project3.lesson4.model=DEBUG

## P3 lesson5 Part14
#spring.jpa.properties.hibernate.generate_statistics=true
logging.level.org.hibernate.stat=DEBUG

## For Hibernate 5.4.5 and later you can also use this property to cause any single query longer than the specified duration to print a message to the log.
hibernate.session.events.log.LOG_QUERIES_SLOWER_THAN_MS=25

## ==============================================

### DataSourceConfig.java ###
## P3 Lesson4 Part09
## We use this together with the method on DataSourceConfig.java
## At the moment is this method deactivated.
#com.udacity.datasource.username=user-udacity
#com.udacity.datasource.password=pw-udacity

## ==============================================

### Content from the project file ###

# Data Source Setup
# Note: Users must create a mysql db that they will reference here, create a user that has access to it on localhost
#       and provide the credentials below to access it

# uncomment the below lines to view sql output in console
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true

## ==============================================

### POSTGRESQL ###

## https://www.spring-boot-blog.de/blog/spring-boot-und-postgresql/

#spring.datasource.url=jdbc:postgresql://localhost:5411/udacity-p3-lesson-db
#spring.datasource.username=user-udacity
#spring.datasource.password=pw-udacity

#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

## Possibilities: always|embedded(default)|never
#spring.datasource.initialization-mode=always

## Manager how spring-boot works with the DB
## https://stackoverflow.com/questions/42135114/how-does-spring-jpa-hibernate-ddl-auto-property-exactly-work-in-spring
## Possibilities: none (default), create, create-drop, validate, update
## "none, validate and update" works with an available db with data. none is the best selection for production.
#spring.jpa.hibernate.ddl-auto=update

## P3 lesson5 Part02
## to use file data-postgres.sql instead data.sql
#spring.datasource.platform=postgres

## ==============================================

### MYSQL ###
## Lesson4 Part 14

#spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/plant
#spring.datasource.username=sa
#spring.datasource.password=sa1234
#spring.datasource.initialization-mode=always
#spring.jpa.hibernate.ddl-auto=create

## ==============================================

### H2 ###

spring.h2.console.enabled=true
spring.h2.console.path=/h2

spring.datasource.url=jdbc:h2:mem:p3-l4-db
spring.datasource.username=sa
spring.datasource.password=

## https://ittone.ma/ittone/java-spring-boot-is-not-creating-tables-automatically/
## https://stackoverflow.com/questions/67678311/spring-boot-is-not-creating-tables-automatically
spring.jpa.defer-datasource-initialization=true

## P3 lesson5 Part02
## to use file data-h2.sql instead data.sql
#spring.datasource.platform=h2

## ==============================================